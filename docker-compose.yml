# version: '3.8'

# services:
#   redis:
#     image: redis:alpine
#     ports:
#       - "6379:6379"
#     volumes:
#       - redis-data:/data
#     healthcheck:
#       test: ["CMD", "redis-cli", "ping"]
#       interval: 5s
#       timeout: 5s
#       retries: 5

#   elasticsearch:
#     image: docker.elastic.co/elasticsearch/elasticsearch:7.14.0
#     environment:
#       - discovery.type=single-node
#       - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
#       - xpack.security.enabled=false
#     ports:
#       - "9200:9200"
#     volumes:
#       - elasticsearch-data:/usr/share/elasticsearch/data
#     healthcheck:
#       test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -q '\"status\":\"green\"\\|\"status\":\"yellow\"'"]
#       interval: 10s
#       timeout: 10s
#       retries: 5

#   simulator:
#     build:
#       context: ./simulator
#       dockerfile: Dockerfile
#     depends_on:
#       redis:
#         condition: service_healthy
#     environment:
#       - REDIS_HOSTNAME=redis
#       - REDIS_PORT=6379
#       - KAFKA_HOSTNAME=kafka:9092
#       - KAFKA_USE_AUTH=false
#       - KAFKA_USE_SSL=false
#       - SIMULATOR_TOPIC_NAME=cosmic-events-topic

#   elastic-ingestor:
#     build:
#       context: ./elastic-ingestor
#       dockerfile: Dockerfile
#     depends_on:
#       elasticsearch:
#         condition: service_healthy
#       kafka:
#         condition: service_started
#     environment:
#       - ELASTIC_URL=http://elasticsearch:9200
#       - KAFKA_HOSTNAME=kafka:9092
#       - KAFKA_USE_AUTH=false
#       - KAFKA_USE_SSL=false
#       - KAFKA_TOPIC=cosmic-events-topic
#     ports:
#       - "3000:3000"

#   kafka:
#     image: bitnami/kafka:latest
#     environment:
#       - KAFKA_CFG_NODE_ID=0
#       - KAFKA_CFG_PROCESS_ROLES=controller,broker
#       - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
#       - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
#       - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
#       - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
#       - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
#       - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
#     ports:
#       - "9092:9092"
#     volumes:
#       - kafka-data:/bitnami/kafka

# volumes:
#   redis-data:
#   elasticsearch-data:
#   kafka-data:

version: "3.9"

services:
  redis:
    image: redis:latest
    ports:
      - "6379:6379"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.13.4
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
    ports:
      - "9200:9200"
      - "9300:9300"

  nodejs:
    build:
      context: ./api-service
      dockerfile: Dockerfile
    container_name: api-service
    ports:
      - "9080:9080"
    environment:
      - REDIS_HOSTNAME=redis
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    depends_on:
      - redis
      - elasticsearch
  
  simulator:
    build:
      context: ./simulator
      dockerfile: Dockerfile
    container_name: simulator
    env_file:
      - simulator/.env
    depends_on:
      - redis
      - elasticsearch
    
  elastic-ingestor:
    build:
      context: ./elastic-ingestor
      dockerfile: Dockerfile
    container_name: elastic-ingestor
    ports:
      - "3000:3000"
    env_file:
      - elastic-ingestor/.env
    depends_on:
      - elasticsearch
  
  scraper:
    build:
      context: ./scraper
      dockerfile: Dockerfile
    container_name: scraper
    ports:
      - "5001:5001"